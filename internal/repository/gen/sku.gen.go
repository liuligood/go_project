// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSku(db *gorm.DB, opts ...gen.DOOption) sku {
	_sku := sku{}

	_sku.skuDo.UseDB(db, opts...)
	_sku.skuDo.UseModel(&model.Sku{})

	tableName := _sku.skuDo.TableName()
	_sku.ALL = field.NewAsterisk(tableName)
	_sku.ID = field.NewInt64(tableName, "id")
	_sku.SpuID = field.NewInt64(tableName, "spu_id")
	_sku.Stock = field.NewInt64(tableName, "stock")
	_sku.Price = field.NewField(tableName, "price")
	_sku.Status = field.NewInt64(tableName, "status")
	_sku.Sign = field.NewInt64(tableName, "sign")
	_sku.Cost = field.NewField(tableName, "cost")
	_sku.Weight = field.NewField(tableName, "weight")
	_sku.Volume = field.NewField(tableName, "volume")
	_sku.CreatedAt = field.NewInt64(tableName, "created_at")
	_sku.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_sku.DeletedAt = field.NewField(tableName, "deleted_at")
	_sku.CreatedBy = field.NewInt64(tableName, "created_by")
	_sku.UpdatedBy = field.NewInt64(tableName, "updated_by")

	_sku.fillFieldMap()

	return _sku
}

// sku 套餐表
type sku struct {
	skuDo skuDo

	ALL       field.Asterisk
	ID        field.Int64
	SpuID     field.Int64
	Stock     field.Int64 // 库存
	Price     field.Field // 价格
	Status    field.Int64 // 状态(1:关闭,2:正常)
	Sign      field.Int64 // 标志(位运算)
	Cost      field.Field // 成本价
	Weight    field.Field // 重量
	Volume    field.Field // 体积
	CreatedAt field.Int64 // 创建时间
	UpdatedAt field.Int64 // 修改时间
	DeletedAt field.Field // 是否删除
	CreatedBy field.Int64 // 创建时间
	UpdatedBy field.Int64 // 修改时间

	fieldMap map[string]field.Expr
}

func (s sku) Table(newTableName string) *sku {
	s.skuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sku) As(alias string) *sku {
	s.skuDo.DO = *(s.skuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sku) updateTableName(table string) *sku {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SpuID = field.NewInt64(table, "spu_id")
	s.Stock = field.NewInt64(table, "stock")
	s.Price = field.NewField(table, "price")
	s.Status = field.NewInt64(table, "status")
	s.Sign = field.NewInt64(table, "sign")
	s.Cost = field.NewField(table, "cost")
	s.Weight = field.NewField(table, "weight")
	s.Volume = field.NewField(table, "volume")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.CreatedBy = field.NewInt64(table, "created_by")
	s.UpdatedBy = field.NewInt64(table, "updated_by")

	s.fillFieldMap()

	return s
}

func (s *sku) WithContext(ctx context.Context) ISkuDo { return s.skuDo.WithContext(ctx) }

func (s sku) TableName() string { return s.skuDo.TableName() }

func (s sku) Alias() string { return s.skuDo.Alias() }

func (s sku) Columns(cols ...field.Expr) gen.Columns { return s.skuDo.Columns(cols...) }

func (s *sku) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sku) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 14)
	s.fieldMap["id"] = s.ID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["stock"] = s.Stock
	s.fieldMap["price"] = s.Price
	s.fieldMap["status"] = s.Status
	s.fieldMap["sign"] = s.Sign
	s.fieldMap["cost"] = s.Cost
	s.fieldMap["weight"] = s.Weight
	s.fieldMap["volume"] = s.Volume
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
}

func (s sku) clone(db *gorm.DB) sku {
	s.skuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sku) replaceDB(db *gorm.DB) sku {
	s.skuDo.ReplaceDB(db)
	return s
}

type skuDo struct{ gen.DO }

type ISkuDo interface {
	gen.SubQuery
	Debug() ISkuDo
	WithContext(ctx context.Context) ISkuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISkuDo
	WriteDB() ISkuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISkuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISkuDo
	Not(conds ...gen.Condition) ISkuDo
	Or(conds ...gen.Condition) ISkuDo
	Select(conds ...field.Expr) ISkuDo
	Where(conds ...gen.Condition) ISkuDo
	Order(conds ...field.Expr) ISkuDo
	Distinct(cols ...field.Expr) ISkuDo
	Omit(cols ...field.Expr) ISkuDo
	Join(table schema.Tabler, on ...field.Expr) ISkuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISkuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISkuDo
	Group(cols ...field.Expr) ISkuDo
	Having(conds ...gen.Condition) ISkuDo
	Limit(limit int) ISkuDo
	Offset(offset int) ISkuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISkuDo
	Unscoped() ISkuDo
	Create(values ...*model.Sku) error
	CreateInBatches(values []*model.Sku, batchSize int) error
	Save(values ...*model.Sku) error
	First() (*model.Sku, error)
	Take() (*model.Sku, error)
	Last() (*model.Sku, error)
	Find() ([]*model.Sku, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sku, err error)
	FindInBatches(result *[]*model.Sku, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Sku) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISkuDo
	Assign(attrs ...field.AssignExpr) ISkuDo
	Joins(fields ...field.RelationField) ISkuDo
	Preload(fields ...field.RelationField) ISkuDo
	FirstOrInit() (*model.Sku, error)
	FirstOrCreate() (*model.Sku, error)
	FindByPage(offset int, limit int) (result []*model.Sku, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISkuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s skuDo) Debug() ISkuDo {
	return s.withDO(s.DO.Debug())
}

func (s skuDo) WithContext(ctx context.Context) ISkuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s skuDo) ReadDB() ISkuDo {
	return s.Clauses(dbresolver.Read)
}

func (s skuDo) WriteDB() ISkuDo {
	return s.Clauses(dbresolver.Write)
}

func (s skuDo) Session(config *gorm.Session) ISkuDo {
	return s.withDO(s.DO.Session(config))
}

func (s skuDo) Clauses(conds ...clause.Expression) ISkuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s skuDo) Returning(value interface{}, columns ...string) ISkuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s skuDo) Not(conds ...gen.Condition) ISkuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s skuDo) Or(conds ...gen.Condition) ISkuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s skuDo) Select(conds ...field.Expr) ISkuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s skuDo) Where(conds ...gen.Condition) ISkuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s skuDo) Order(conds ...field.Expr) ISkuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s skuDo) Distinct(cols ...field.Expr) ISkuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s skuDo) Omit(cols ...field.Expr) ISkuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s skuDo) Join(table schema.Tabler, on ...field.Expr) ISkuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s skuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISkuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s skuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISkuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s skuDo) Group(cols ...field.Expr) ISkuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s skuDo) Having(conds ...gen.Condition) ISkuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s skuDo) Limit(limit int) ISkuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s skuDo) Offset(offset int) ISkuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s skuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISkuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s skuDo) Unscoped() ISkuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s skuDo) Create(values ...*model.Sku) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s skuDo) CreateInBatches(values []*model.Sku, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s skuDo) Save(values ...*model.Sku) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s skuDo) First() (*model.Sku, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Take() (*model.Sku, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Last() (*model.Sku, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) Find() ([]*model.Sku, error) {
	result, err := s.DO.Find()
	return result.([]*model.Sku), err
}

func (s skuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Sku, err error) {
	buf := make([]*model.Sku, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s skuDo) FindInBatches(result *[]*model.Sku, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s skuDo) Attrs(attrs ...field.AssignExpr) ISkuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s skuDo) Assign(attrs ...field.AssignExpr) ISkuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s skuDo) Joins(fields ...field.RelationField) ISkuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s skuDo) Preload(fields ...field.RelationField) ISkuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s skuDo) FirstOrInit() (*model.Sku, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) FirstOrCreate() (*model.Sku, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Sku), nil
	}
}

func (s skuDo) FindByPage(offset int, limit int) (result []*model.Sku, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s skuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s skuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s skuDo) Delete(models ...*model.Sku) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *skuDo) withDO(do gen.Dao) *skuDo {
	s.DO = *do.(*gen.DO)
	return s
}
