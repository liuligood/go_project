// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSpu(db *gorm.DB, opts ...gen.DOOption) spu {
	_spu := spu{}

	_spu.spuDo.UseDB(db, opts...)
	_spu.spuDo.UseModel(&model.Spu{})

	tableName := _spu.spuDo.TableName()
	_spu.ALL = field.NewAsterisk(tableName)
	_spu.ID = field.NewInt64(tableName, "id")
	_spu.Name = field.NewString(tableName, "name")
	_spu.Title = field.NewString(tableName, "title")
	_spu.Description = field.NewString(tableName, "description")
	_spu.ServerID = field.NewInt64(tableName, "server_id")
	_spu.CategoryID = field.NewInt64(tableName, "category_id")
	_spu.BrandID = field.NewInt64(tableName, "brand_id")
	_spu.ModelID = field.NewInt64(tableName, "model_id")
	_spu.Keyword = field.NewString(tableName, "keyword")
	_spu.Status = field.NewInt64(tableName, "status")
	_spu.Sort = field.NewInt64(tableName, "sort")
	_spu.Sign = field.NewInt64(tableName, "sign")
	_spu.Scene = field.NewInt64(tableName, "scene")
	_spu.UnitName = field.NewString(tableName, "unit_name")
	_spu.Cover = field.NewString(tableName, "cover")
	_spu.DownReason = field.NewString(tableName, "down_reason")
	_spu.Version = field.NewInt64(tableName, "version")
	_spu.CreatedAt = field.NewInt64(tableName, "created_at")
	_spu.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_spu.DeletedAt = field.NewField(tableName, "deleted_at")
	_spu.CreatedBy = field.NewInt64(tableName, "created_by")
	_spu.UpdatedBy = field.NewInt64(tableName, "updated_by")

	_spu.fillFieldMap()

	return _spu
}

// spu 商品表
type spu struct {
	spuDo spuDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	Name        field.String // 商品名称
	Title       field.String // 标题
	Description field.String // 商品简介
	ServerID    field.Int64  // 商家id
	CategoryID  field.Int64  // 分类id
	BrandID     field.Int64  // 品牌id
	ModelID     field.Int64  // 型号id
	Keyword     field.String // 关键词
	Status      field.Int64  // 状态(1:上架中,2:待审核,3:商家下架,4:系统下架)
	Sort        field.Int64  // 排序
	Sign        field.Int64  // spu标志（位运算）
	Scene       field.Int64  // 场景（位运算）
	UnitName    field.String // 单位名称
	Cover       field.String // 封面图
	DownReason  field.String // 下架原因
	Version     field.Int64  // 版本
	CreatedAt   field.Int64  // 创建时间
	UpdatedAt   field.Int64  // 修改时间
	DeletedAt   field.Field  // 是否删除
	CreatedBy   field.Int64  // 创建时间
	UpdatedBy   field.Int64  // 修改时间

	fieldMap map[string]field.Expr
}

func (s spu) Table(newTableName string) *spu {
	s.spuDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spu) As(alias string) *spu {
	s.spuDo.DO = *(s.spuDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spu) updateTableName(table string) *spu {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.Name = field.NewString(table, "name")
	s.Title = field.NewString(table, "title")
	s.Description = field.NewString(table, "description")
	s.ServerID = field.NewInt64(table, "server_id")
	s.CategoryID = field.NewInt64(table, "category_id")
	s.BrandID = field.NewInt64(table, "brand_id")
	s.ModelID = field.NewInt64(table, "model_id")
	s.Keyword = field.NewString(table, "keyword")
	s.Status = field.NewInt64(table, "status")
	s.Sort = field.NewInt64(table, "sort")
	s.Sign = field.NewInt64(table, "sign")
	s.Scene = field.NewInt64(table, "scene")
	s.UnitName = field.NewString(table, "unit_name")
	s.Cover = field.NewString(table, "cover")
	s.DownReason = field.NewString(table, "down_reason")
	s.Version = field.NewInt64(table, "version")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.CreatedBy = field.NewInt64(table, "created_by")
	s.UpdatedBy = field.NewInt64(table, "updated_by")

	s.fillFieldMap()

	return s
}

func (s *spu) WithContext(ctx context.Context) ISpuDo { return s.spuDo.WithContext(ctx) }

func (s spu) TableName() string { return s.spuDo.TableName() }

func (s spu) Alias() string { return s.spuDo.Alias() }

func (s spu) Columns(cols ...field.Expr) gen.Columns { return s.spuDo.Columns(cols...) }

func (s *spu) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spu) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 22)
	s.fieldMap["id"] = s.ID
	s.fieldMap["name"] = s.Name
	s.fieldMap["title"] = s.Title
	s.fieldMap["description"] = s.Description
	s.fieldMap["server_id"] = s.ServerID
	s.fieldMap["category_id"] = s.CategoryID
	s.fieldMap["brand_id"] = s.BrandID
	s.fieldMap["model_id"] = s.ModelID
	s.fieldMap["keyword"] = s.Keyword
	s.fieldMap["status"] = s.Status
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["sign"] = s.Sign
	s.fieldMap["scene"] = s.Scene
	s.fieldMap["unit_name"] = s.UnitName
	s.fieldMap["cover"] = s.Cover
	s.fieldMap["down_reason"] = s.DownReason
	s.fieldMap["version"] = s.Version
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
}

func (s spu) clone(db *gorm.DB) spu {
	s.spuDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spu) replaceDB(db *gorm.DB) spu {
	s.spuDo.ReplaceDB(db)
	return s
}

type spuDo struct{ gen.DO }

type ISpuDo interface {
	gen.SubQuery
	Debug() ISpuDo
	WithContext(ctx context.Context) ISpuDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpuDo
	WriteDB() ISpuDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpuDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpuDo
	Not(conds ...gen.Condition) ISpuDo
	Or(conds ...gen.Condition) ISpuDo
	Select(conds ...field.Expr) ISpuDo
	Where(conds ...gen.Condition) ISpuDo
	Order(conds ...field.Expr) ISpuDo
	Distinct(cols ...field.Expr) ISpuDo
	Omit(cols ...field.Expr) ISpuDo
	Join(table schema.Tabler, on ...field.Expr) ISpuDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpuDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpuDo
	Group(cols ...field.Expr) ISpuDo
	Having(conds ...gen.Condition) ISpuDo
	Limit(limit int) ISpuDo
	Offset(offset int) ISpuDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuDo
	Unscoped() ISpuDo
	Create(values ...*model.Spu) error
	CreateInBatches(values []*model.Spu, batchSize int) error
	Save(values ...*model.Spu) error
	First() (*model.Spu, error)
	Take() (*model.Spu, error)
	Last() (*model.Spu, error)
	Find() ([]*model.Spu, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Spu, err error)
	FindInBatches(result *[]*model.Spu, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Spu) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpuDo
	Assign(attrs ...field.AssignExpr) ISpuDo
	Joins(fields ...field.RelationField) ISpuDo
	Preload(fields ...field.RelationField) ISpuDo
	FirstOrInit() (*model.Spu, error)
	FirstOrCreate() (*model.Spu, error)
	FindByPage(offset int, limit int) (result []*model.Spu, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpuDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spuDo) Debug() ISpuDo {
	return s.withDO(s.DO.Debug())
}

func (s spuDo) WithContext(ctx context.Context) ISpuDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spuDo) ReadDB() ISpuDo {
	return s.Clauses(dbresolver.Read)
}

func (s spuDo) WriteDB() ISpuDo {
	return s.Clauses(dbresolver.Write)
}

func (s spuDo) Session(config *gorm.Session) ISpuDo {
	return s.withDO(s.DO.Session(config))
}

func (s spuDo) Clauses(conds ...clause.Expression) ISpuDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spuDo) Returning(value interface{}, columns ...string) ISpuDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spuDo) Not(conds ...gen.Condition) ISpuDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spuDo) Or(conds ...gen.Condition) ISpuDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spuDo) Select(conds ...field.Expr) ISpuDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spuDo) Where(conds ...gen.Condition) ISpuDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spuDo) Order(conds ...field.Expr) ISpuDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spuDo) Distinct(cols ...field.Expr) ISpuDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spuDo) Omit(cols ...field.Expr) ISpuDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spuDo) Join(table schema.Tabler, on ...field.Expr) ISpuDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spuDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpuDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spuDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpuDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spuDo) Group(cols ...field.Expr) ISpuDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spuDo) Having(conds ...gen.Condition) ISpuDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spuDo) Limit(limit int) ISpuDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spuDo) Offset(offset int) ISpuDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spuDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spuDo) Unscoped() ISpuDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spuDo) Create(values ...*model.Spu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spuDo) CreateInBatches(values []*model.Spu, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spuDo) Save(values ...*model.Spu) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spuDo) First() (*model.Spu, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Take() (*model.Spu, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Last() (*model.Spu, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) Find() ([]*model.Spu, error) {
	result, err := s.DO.Find()
	return result.([]*model.Spu), err
}

func (s spuDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Spu, err error) {
	buf := make([]*model.Spu, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spuDo) FindInBatches(result *[]*model.Spu, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spuDo) Attrs(attrs ...field.AssignExpr) ISpuDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spuDo) Assign(attrs ...field.AssignExpr) ISpuDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spuDo) Joins(fields ...field.RelationField) ISpuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spuDo) Preload(fields ...field.RelationField) ISpuDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spuDo) FirstOrInit() (*model.Spu, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) FirstOrCreate() (*model.Spu, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Spu), nil
	}
}

func (s spuDo) FindByPage(offset int, limit int) (result []*model.Spu, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spuDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spuDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spuDo) Delete(models ...*model.Spu) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spuDo) withDO(do gen.Dao) *spuDo {
	s.DO = *do.(*gen.DO)
	return s
}
