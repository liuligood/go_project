// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSpuService(db *gorm.DB, opts ...gen.DOOption) spuService {
	_spuService := spuService{}

	_spuService.spuServiceDo.UseDB(db, opts...)
	_spuService.spuServiceDo.UseModel(&model.SpuService{})

	tableName := _spuService.spuServiceDo.TableName()
	_spuService.ALL = field.NewAsterisk(tableName)
	_spuService.ID = field.NewInt64(tableName, "id")
	_spuService.SpuID = field.NewInt64(tableName, "spu_id")
	_spuService.ServiceID = field.NewInt64(tableName, "service_id")
	_spuService.Type = field.NewInt64(tableName, "type")
	_spuService.Name = field.NewString(tableName, "name")
	_spuService.CreatedAt = field.NewInt64(tableName, "created_at")
	_spuService.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_spuService.DeletedAt = field.NewField(tableName, "deleted_at")
	_spuService.CreatedBy = field.NewInt64(tableName, "created_by")
	_spuService.UpdatedBy = field.NewInt64(tableName, "updated_by")

	_spuService.fillFieldMap()

	return _spuService
}

// spuService 商品服务表
type spuService struct {
	spuServiceDo spuServiceDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	SpuID     field.Int64  // 商品id
	ServiceID field.Int64  // 服务id
	Type      field.Int64  // 类型
	Name      field.String // 服务名称
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除
	CreatedBy field.Int64  // 创建时间
	UpdatedBy field.Int64  // 修改时间

	fieldMap map[string]field.Expr
}

func (s spuService) Table(newTableName string) *spuService {
	s.spuServiceDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spuService) As(alias string) *spuService {
	s.spuServiceDo.DO = *(s.spuServiceDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spuService) updateTableName(table string) *spuService {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SpuID = field.NewInt64(table, "spu_id")
	s.ServiceID = field.NewInt64(table, "service_id")
	s.Type = field.NewInt64(table, "type")
	s.Name = field.NewString(table, "name")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.CreatedBy = field.NewInt64(table, "created_by")
	s.UpdatedBy = field.NewInt64(table, "updated_by")

	s.fillFieldMap()

	return s
}

func (s *spuService) WithContext(ctx context.Context) ISpuServiceDo {
	return s.spuServiceDo.WithContext(ctx)
}

func (s spuService) TableName() string { return s.spuServiceDo.TableName() }

func (s spuService) Alias() string { return s.spuServiceDo.Alias() }

func (s spuService) Columns(cols ...field.Expr) gen.Columns { return s.spuServiceDo.Columns(cols...) }

func (s *spuService) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spuService) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["service_id"] = s.ServiceID
	s.fieldMap["type"] = s.Type
	s.fieldMap["name"] = s.Name
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
}

func (s spuService) clone(db *gorm.DB) spuService {
	s.spuServiceDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spuService) replaceDB(db *gorm.DB) spuService {
	s.spuServiceDo.ReplaceDB(db)
	return s
}

type spuServiceDo struct{ gen.DO }

type ISpuServiceDo interface {
	gen.SubQuery
	Debug() ISpuServiceDo
	WithContext(ctx context.Context) ISpuServiceDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpuServiceDo
	WriteDB() ISpuServiceDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpuServiceDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpuServiceDo
	Not(conds ...gen.Condition) ISpuServiceDo
	Or(conds ...gen.Condition) ISpuServiceDo
	Select(conds ...field.Expr) ISpuServiceDo
	Where(conds ...gen.Condition) ISpuServiceDo
	Order(conds ...field.Expr) ISpuServiceDo
	Distinct(cols ...field.Expr) ISpuServiceDo
	Omit(cols ...field.Expr) ISpuServiceDo
	Join(table schema.Tabler, on ...field.Expr) ISpuServiceDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpuServiceDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpuServiceDo
	Group(cols ...field.Expr) ISpuServiceDo
	Having(conds ...gen.Condition) ISpuServiceDo
	Limit(limit int) ISpuServiceDo
	Offset(offset int) ISpuServiceDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuServiceDo
	Unscoped() ISpuServiceDo
	Create(values ...*model.SpuService) error
	CreateInBatches(values []*model.SpuService, batchSize int) error
	Save(values ...*model.SpuService) error
	First() (*model.SpuService, error)
	Take() (*model.SpuService, error)
	Last() (*model.SpuService, error)
	Find() ([]*model.SpuService, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuService, err error)
	FindInBatches(result *[]*model.SpuService, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SpuService) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpuServiceDo
	Assign(attrs ...field.AssignExpr) ISpuServiceDo
	Joins(fields ...field.RelationField) ISpuServiceDo
	Preload(fields ...field.RelationField) ISpuServiceDo
	FirstOrInit() (*model.SpuService, error)
	FirstOrCreate() (*model.SpuService, error)
	FindByPage(offset int, limit int) (result []*model.SpuService, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpuServiceDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spuServiceDo) Debug() ISpuServiceDo {
	return s.withDO(s.DO.Debug())
}

func (s spuServiceDo) WithContext(ctx context.Context) ISpuServiceDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spuServiceDo) ReadDB() ISpuServiceDo {
	return s.Clauses(dbresolver.Read)
}

func (s spuServiceDo) WriteDB() ISpuServiceDo {
	return s.Clauses(dbresolver.Write)
}

func (s spuServiceDo) Session(config *gorm.Session) ISpuServiceDo {
	return s.withDO(s.DO.Session(config))
}

func (s spuServiceDo) Clauses(conds ...clause.Expression) ISpuServiceDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spuServiceDo) Returning(value interface{}, columns ...string) ISpuServiceDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spuServiceDo) Not(conds ...gen.Condition) ISpuServiceDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spuServiceDo) Or(conds ...gen.Condition) ISpuServiceDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spuServiceDo) Select(conds ...field.Expr) ISpuServiceDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spuServiceDo) Where(conds ...gen.Condition) ISpuServiceDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spuServiceDo) Order(conds ...field.Expr) ISpuServiceDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spuServiceDo) Distinct(cols ...field.Expr) ISpuServiceDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spuServiceDo) Omit(cols ...field.Expr) ISpuServiceDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spuServiceDo) Join(table schema.Tabler, on ...field.Expr) ISpuServiceDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spuServiceDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpuServiceDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spuServiceDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpuServiceDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spuServiceDo) Group(cols ...field.Expr) ISpuServiceDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spuServiceDo) Having(conds ...gen.Condition) ISpuServiceDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spuServiceDo) Limit(limit int) ISpuServiceDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spuServiceDo) Offset(offset int) ISpuServiceDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spuServiceDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuServiceDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spuServiceDo) Unscoped() ISpuServiceDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spuServiceDo) Create(values ...*model.SpuService) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spuServiceDo) CreateInBatches(values []*model.SpuService, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spuServiceDo) Save(values ...*model.SpuService) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spuServiceDo) First() (*model.SpuService, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuService), nil
	}
}

func (s spuServiceDo) Take() (*model.SpuService, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuService), nil
	}
}

func (s spuServiceDo) Last() (*model.SpuService, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuService), nil
	}
}

func (s spuServiceDo) Find() ([]*model.SpuService, error) {
	result, err := s.DO.Find()
	return result.([]*model.SpuService), err
}

func (s spuServiceDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuService, err error) {
	buf := make([]*model.SpuService, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spuServiceDo) FindInBatches(result *[]*model.SpuService, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spuServiceDo) Attrs(attrs ...field.AssignExpr) ISpuServiceDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spuServiceDo) Assign(attrs ...field.AssignExpr) ISpuServiceDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spuServiceDo) Joins(fields ...field.RelationField) ISpuServiceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spuServiceDo) Preload(fields ...field.RelationField) ISpuServiceDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spuServiceDo) FirstOrInit() (*model.SpuService, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuService), nil
	}
}

func (s spuServiceDo) FirstOrCreate() (*model.SpuService, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuService), nil
	}
}

func (s spuServiceDo) FindByPage(offset int, limit int) (result []*model.SpuService, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spuServiceDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spuServiceDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spuServiceDo) Delete(models ...*model.SpuService) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spuServiceDo) withDO(do gen.Dao) *spuServiceDo {
	s.DO = *do.(*gen.DO)
	return s
}
