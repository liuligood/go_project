// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSpuLog(db *gorm.DB, opts ...gen.DOOption) spuLog {
	_spuLog := spuLog{}

	_spuLog.spuLogDo.UseDB(db, opts...)
	_spuLog.spuLogDo.UseModel(&model.SpuLog{})

	tableName := _spuLog.spuLogDo.TableName()
	_spuLog.ALL = field.NewAsterisk(tableName)
	_spuLog.ID = field.NewInt64(tableName, "id")
	_spuLog.SpuID = field.NewInt64(tableName, "spu_id")
	_spuLog.Details = field.NewString(tableName, "details")
	_spuLog.OperatePort = field.NewInt64(tableName, "operate_port")
	_spuLog.ServerID = field.NewInt64(tableName, "server_id")
	_spuLog.Version = field.NewInt64(tableName, "version")
	_spuLog.CreatedBy = field.NewInt64(tableName, "created_by")
	_spuLog.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_spuLog.CreatedAt = field.NewInt64(tableName, "created_at")
	_spuLog.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_spuLog.DeletedAt = field.NewField(tableName, "deleted_at")

	_spuLog.fillFieldMap()

	return _spuLog
}

// spuLog 商品日志表
type spuLog struct {
	spuLogDo spuLogDo

	ALL         field.Asterisk
	ID          field.Int64  // 主键
	SpuID       field.Int64  // 商品id
	Details     field.String // 操作内容
	OperatePort field.Int64  // 操作端口(1-运营后台,2-商家后台)
	ServerID    field.Int64  // 商家id
	Version     field.Int64  // 版本号
	CreatedBy   field.Int64  // 创建时间
	UpdatedBy   field.Int64  // 修改时间
	CreatedAt   field.Int64  // 创建时间
	UpdatedAt   field.Int64  // 修改时间
	DeletedAt   field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (s spuLog) Table(newTableName string) *spuLog {
	s.spuLogDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spuLog) As(alias string) *spuLog {
	s.spuLogDo.DO = *(s.spuLogDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spuLog) updateTableName(table string) *spuLog {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SpuID = field.NewInt64(table, "spu_id")
	s.Details = field.NewString(table, "details")
	s.OperatePort = field.NewInt64(table, "operate_port")
	s.ServerID = field.NewInt64(table, "server_id")
	s.Version = field.NewInt64(table, "version")
	s.CreatedBy = field.NewInt64(table, "created_by")
	s.UpdatedBy = field.NewInt64(table, "updated_by")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *spuLog) WithContext(ctx context.Context) ISpuLogDo { return s.spuLogDo.WithContext(ctx) }

func (s spuLog) TableName() string { return s.spuLogDo.TableName() }

func (s spuLog) Alias() string { return s.spuLogDo.Alias() }

func (s spuLog) Columns(cols ...field.Expr) gen.Columns { return s.spuLogDo.Columns(cols...) }

func (s *spuLog) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spuLog) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 11)
	s.fieldMap["id"] = s.ID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["details"] = s.Details
	s.fieldMap["operate_port"] = s.OperatePort
	s.fieldMap["server_id"] = s.ServerID
	s.fieldMap["version"] = s.Version
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s spuLog) clone(db *gorm.DB) spuLog {
	s.spuLogDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spuLog) replaceDB(db *gorm.DB) spuLog {
	s.spuLogDo.ReplaceDB(db)
	return s
}

type spuLogDo struct{ gen.DO }

type ISpuLogDo interface {
	gen.SubQuery
	Debug() ISpuLogDo
	WithContext(ctx context.Context) ISpuLogDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpuLogDo
	WriteDB() ISpuLogDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpuLogDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpuLogDo
	Not(conds ...gen.Condition) ISpuLogDo
	Or(conds ...gen.Condition) ISpuLogDo
	Select(conds ...field.Expr) ISpuLogDo
	Where(conds ...gen.Condition) ISpuLogDo
	Order(conds ...field.Expr) ISpuLogDo
	Distinct(cols ...field.Expr) ISpuLogDo
	Omit(cols ...field.Expr) ISpuLogDo
	Join(table schema.Tabler, on ...field.Expr) ISpuLogDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpuLogDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpuLogDo
	Group(cols ...field.Expr) ISpuLogDo
	Having(conds ...gen.Condition) ISpuLogDo
	Limit(limit int) ISpuLogDo
	Offset(offset int) ISpuLogDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuLogDo
	Unscoped() ISpuLogDo
	Create(values ...*model.SpuLog) error
	CreateInBatches(values []*model.SpuLog, batchSize int) error
	Save(values ...*model.SpuLog) error
	First() (*model.SpuLog, error)
	Take() (*model.SpuLog, error)
	Last() (*model.SpuLog, error)
	Find() ([]*model.SpuLog, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuLog, err error)
	FindInBatches(result *[]*model.SpuLog, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SpuLog) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpuLogDo
	Assign(attrs ...field.AssignExpr) ISpuLogDo
	Joins(fields ...field.RelationField) ISpuLogDo
	Preload(fields ...field.RelationField) ISpuLogDo
	FirstOrInit() (*model.SpuLog, error)
	FirstOrCreate() (*model.SpuLog, error)
	FindByPage(offset int, limit int) (result []*model.SpuLog, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpuLogDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spuLogDo) Debug() ISpuLogDo {
	return s.withDO(s.DO.Debug())
}

func (s spuLogDo) WithContext(ctx context.Context) ISpuLogDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spuLogDo) ReadDB() ISpuLogDo {
	return s.Clauses(dbresolver.Read)
}

func (s spuLogDo) WriteDB() ISpuLogDo {
	return s.Clauses(dbresolver.Write)
}

func (s spuLogDo) Session(config *gorm.Session) ISpuLogDo {
	return s.withDO(s.DO.Session(config))
}

func (s spuLogDo) Clauses(conds ...clause.Expression) ISpuLogDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spuLogDo) Returning(value interface{}, columns ...string) ISpuLogDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spuLogDo) Not(conds ...gen.Condition) ISpuLogDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spuLogDo) Or(conds ...gen.Condition) ISpuLogDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spuLogDo) Select(conds ...field.Expr) ISpuLogDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spuLogDo) Where(conds ...gen.Condition) ISpuLogDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spuLogDo) Order(conds ...field.Expr) ISpuLogDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spuLogDo) Distinct(cols ...field.Expr) ISpuLogDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spuLogDo) Omit(cols ...field.Expr) ISpuLogDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spuLogDo) Join(table schema.Tabler, on ...field.Expr) ISpuLogDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spuLogDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpuLogDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spuLogDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpuLogDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spuLogDo) Group(cols ...field.Expr) ISpuLogDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spuLogDo) Having(conds ...gen.Condition) ISpuLogDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spuLogDo) Limit(limit int) ISpuLogDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spuLogDo) Offset(offset int) ISpuLogDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spuLogDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuLogDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spuLogDo) Unscoped() ISpuLogDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spuLogDo) Create(values ...*model.SpuLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spuLogDo) CreateInBatches(values []*model.SpuLog, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spuLogDo) Save(values ...*model.SpuLog) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spuLogDo) First() (*model.SpuLog, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLog), nil
	}
}

func (s spuLogDo) Take() (*model.SpuLog, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLog), nil
	}
}

func (s spuLogDo) Last() (*model.SpuLog, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLog), nil
	}
}

func (s spuLogDo) Find() ([]*model.SpuLog, error) {
	result, err := s.DO.Find()
	return result.([]*model.SpuLog), err
}

func (s spuLogDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuLog, err error) {
	buf := make([]*model.SpuLog, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spuLogDo) FindInBatches(result *[]*model.SpuLog, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spuLogDo) Attrs(attrs ...field.AssignExpr) ISpuLogDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spuLogDo) Assign(attrs ...field.AssignExpr) ISpuLogDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spuLogDo) Joins(fields ...field.RelationField) ISpuLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spuLogDo) Preload(fields ...field.RelationField) ISpuLogDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spuLogDo) FirstOrInit() (*model.SpuLog, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLog), nil
	}
}

func (s spuLogDo) FirstOrCreate() (*model.SpuLog, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLog), nil
	}
}

func (s spuLogDo) FindByPage(offset int, limit int) (result []*model.SpuLog, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spuLogDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spuLogDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spuLogDo) Delete(models ...*model.SpuLog) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spuLogDo) withDO(do gen.Dao) *spuLogDo {
	s.DO = *do.(*gen.DO)
	return s
}
