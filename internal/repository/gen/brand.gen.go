// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newBrand(db *gorm.DB, opts ...gen.DOOption) brand {
	_brand := brand{}

	_brand.brandDo.UseDB(db, opts...)
	_brand.brandDo.UseModel(&model.Brand{})

	tableName := _brand.brandDo.TableName()
	_brand.ALL = field.NewAsterisk(tableName)
	_brand.ID = field.NewInt64(tableName, "id")
	_brand.Name = field.NewString(tableName, "name")
	_brand.Code = field.NewString(tableName, "code")
	_brand.Icon = field.NewString(tableName, "icon")
	_brand.Sort = field.NewInt64(tableName, "sort")
	_brand.CreatedBy = field.NewInt64(tableName, "created_by")
	_brand.UpdatedBy = field.NewInt64(tableName, "updated_by")
	_brand.CreatedAt = field.NewInt64(tableName, "created_at")
	_brand.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_brand.DeletedAt = field.NewField(tableName, "deleted_at")

	_brand.fillFieldMap()

	return _brand
}

// brand 品牌表
type brand struct {
	brandDo brandDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	Name      field.String // 名称
	Code      field.String // 编码
	Icon      field.String // 图标
	Sort      field.Int64  // 排序
	CreatedBy field.Int64  // 创建时间
	UpdatedBy field.Int64  // 修改时间
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除

	fieldMap map[string]field.Expr
}

func (b brand) Table(newTableName string) *brand {
	b.brandDo.UseTable(newTableName)
	return b.updateTableName(newTableName)
}

func (b brand) As(alias string) *brand {
	b.brandDo.DO = *(b.brandDo.As(alias).(*gen.DO))
	return b.updateTableName(alias)
}

func (b *brand) updateTableName(table string) *brand {
	b.ALL = field.NewAsterisk(table)
	b.ID = field.NewInt64(table, "id")
	b.Name = field.NewString(table, "name")
	b.Code = field.NewString(table, "code")
	b.Icon = field.NewString(table, "icon")
	b.Sort = field.NewInt64(table, "sort")
	b.CreatedBy = field.NewInt64(table, "created_by")
	b.UpdatedBy = field.NewInt64(table, "updated_by")
	b.CreatedAt = field.NewInt64(table, "created_at")
	b.UpdatedAt = field.NewInt64(table, "updated_at")
	b.DeletedAt = field.NewField(table, "deleted_at")

	b.fillFieldMap()

	return b
}

func (b *brand) WithContext(ctx context.Context) IBrandDo { return b.brandDo.WithContext(ctx) }

func (b brand) TableName() string { return b.brandDo.TableName() }

func (b brand) Alias() string { return b.brandDo.Alias() }

func (b brand) Columns(cols ...field.Expr) gen.Columns { return b.brandDo.Columns(cols...) }

func (b *brand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := b.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (b *brand) fillFieldMap() {
	b.fieldMap = make(map[string]field.Expr, 10)
	b.fieldMap["id"] = b.ID
	b.fieldMap["name"] = b.Name
	b.fieldMap["code"] = b.Code
	b.fieldMap["icon"] = b.Icon
	b.fieldMap["sort"] = b.Sort
	b.fieldMap["created_by"] = b.CreatedBy
	b.fieldMap["updated_by"] = b.UpdatedBy
	b.fieldMap["created_at"] = b.CreatedAt
	b.fieldMap["updated_at"] = b.UpdatedAt
	b.fieldMap["deleted_at"] = b.DeletedAt
}

func (b brand) clone(db *gorm.DB) brand {
	b.brandDo.ReplaceConnPool(db.Statement.ConnPool)
	return b
}

func (b brand) replaceDB(db *gorm.DB) brand {
	b.brandDo.ReplaceDB(db)
	return b
}

type brandDo struct{ gen.DO }

type IBrandDo interface {
	gen.SubQuery
	Debug() IBrandDo
	WithContext(ctx context.Context) IBrandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IBrandDo
	WriteDB() IBrandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IBrandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IBrandDo
	Not(conds ...gen.Condition) IBrandDo
	Or(conds ...gen.Condition) IBrandDo
	Select(conds ...field.Expr) IBrandDo
	Where(conds ...gen.Condition) IBrandDo
	Order(conds ...field.Expr) IBrandDo
	Distinct(cols ...field.Expr) IBrandDo
	Omit(cols ...field.Expr) IBrandDo
	Join(table schema.Tabler, on ...field.Expr) IBrandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IBrandDo
	RightJoin(table schema.Tabler, on ...field.Expr) IBrandDo
	Group(cols ...field.Expr) IBrandDo
	Having(conds ...gen.Condition) IBrandDo
	Limit(limit int) IBrandDo
	Offset(offset int) IBrandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IBrandDo
	Unscoped() IBrandDo
	Create(values ...*model.Brand) error
	CreateInBatches(values []*model.Brand, batchSize int) error
	Save(values ...*model.Brand) error
	First() (*model.Brand, error)
	Take() (*model.Brand, error)
	Last() (*model.Brand, error)
	Find() ([]*model.Brand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Brand, err error)
	FindInBatches(result *[]*model.Brand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Brand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IBrandDo
	Assign(attrs ...field.AssignExpr) IBrandDo
	Joins(fields ...field.RelationField) IBrandDo
	Preload(fields ...field.RelationField) IBrandDo
	FirstOrInit() (*model.Brand, error)
	FirstOrCreate() (*model.Brand, error)
	FindByPage(offset int, limit int) (result []*model.Brand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IBrandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (b brandDo) Debug() IBrandDo {
	return b.withDO(b.DO.Debug())
}

func (b brandDo) WithContext(ctx context.Context) IBrandDo {
	return b.withDO(b.DO.WithContext(ctx))
}

func (b brandDo) ReadDB() IBrandDo {
	return b.Clauses(dbresolver.Read)
}

func (b brandDo) WriteDB() IBrandDo {
	return b.Clauses(dbresolver.Write)
}

func (b brandDo) Session(config *gorm.Session) IBrandDo {
	return b.withDO(b.DO.Session(config))
}

func (b brandDo) Clauses(conds ...clause.Expression) IBrandDo {
	return b.withDO(b.DO.Clauses(conds...))
}

func (b brandDo) Returning(value interface{}, columns ...string) IBrandDo {
	return b.withDO(b.DO.Returning(value, columns...))
}

func (b brandDo) Not(conds ...gen.Condition) IBrandDo {
	return b.withDO(b.DO.Not(conds...))
}

func (b brandDo) Or(conds ...gen.Condition) IBrandDo {
	return b.withDO(b.DO.Or(conds...))
}

func (b brandDo) Select(conds ...field.Expr) IBrandDo {
	return b.withDO(b.DO.Select(conds...))
}

func (b brandDo) Where(conds ...gen.Condition) IBrandDo {
	return b.withDO(b.DO.Where(conds...))
}

func (b brandDo) Order(conds ...field.Expr) IBrandDo {
	return b.withDO(b.DO.Order(conds...))
}

func (b brandDo) Distinct(cols ...field.Expr) IBrandDo {
	return b.withDO(b.DO.Distinct(cols...))
}

func (b brandDo) Omit(cols ...field.Expr) IBrandDo {
	return b.withDO(b.DO.Omit(cols...))
}

func (b brandDo) Join(table schema.Tabler, on ...field.Expr) IBrandDo {
	return b.withDO(b.DO.Join(table, on...))
}

func (b brandDo) LeftJoin(table schema.Tabler, on ...field.Expr) IBrandDo {
	return b.withDO(b.DO.LeftJoin(table, on...))
}

func (b brandDo) RightJoin(table schema.Tabler, on ...field.Expr) IBrandDo {
	return b.withDO(b.DO.RightJoin(table, on...))
}

func (b brandDo) Group(cols ...field.Expr) IBrandDo {
	return b.withDO(b.DO.Group(cols...))
}

func (b brandDo) Having(conds ...gen.Condition) IBrandDo {
	return b.withDO(b.DO.Having(conds...))
}

func (b brandDo) Limit(limit int) IBrandDo {
	return b.withDO(b.DO.Limit(limit))
}

func (b brandDo) Offset(offset int) IBrandDo {
	return b.withDO(b.DO.Offset(offset))
}

func (b brandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IBrandDo {
	return b.withDO(b.DO.Scopes(funcs...))
}

func (b brandDo) Unscoped() IBrandDo {
	return b.withDO(b.DO.Unscoped())
}

func (b brandDo) Create(values ...*model.Brand) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Create(values)
}

func (b brandDo) CreateInBatches(values []*model.Brand, batchSize int) error {
	return b.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (b brandDo) Save(values ...*model.Brand) error {
	if len(values) == 0 {
		return nil
	}
	return b.DO.Save(values)
}

func (b brandDo) First() (*model.Brand, error) {
	if result, err := b.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Brand), nil
	}
}

func (b brandDo) Take() (*model.Brand, error) {
	if result, err := b.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Brand), nil
	}
}

func (b brandDo) Last() (*model.Brand, error) {
	if result, err := b.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Brand), nil
	}
}

func (b brandDo) Find() ([]*model.Brand, error) {
	result, err := b.DO.Find()
	return result.([]*model.Brand), err
}

func (b brandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Brand, err error) {
	buf := make([]*model.Brand, 0, batchSize)
	err = b.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (b brandDo) FindInBatches(result *[]*model.Brand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return b.DO.FindInBatches(result, batchSize, fc)
}

func (b brandDo) Attrs(attrs ...field.AssignExpr) IBrandDo {
	return b.withDO(b.DO.Attrs(attrs...))
}

func (b brandDo) Assign(attrs ...field.AssignExpr) IBrandDo {
	return b.withDO(b.DO.Assign(attrs...))
}

func (b brandDo) Joins(fields ...field.RelationField) IBrandDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Joins(_f))
	}
	return &b
}

func (b brandDo) Preload(fields ...field.RelationField) IBrandDo {
	for _, _f := range fields {
		b = *b.withDO(b.DO.Preload(_f))
	}
	return &b
}

func (b brandDo) FirstOrInit() (*model.Brand, error) {
	if result, err := b.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Brand), nil
	}
}

func (b brandDo) FirstOrCreate() (*model.Brand, error) {
	if result, err := b.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Brand), nil
	}
}

func (b brandDo) FindByPage(offset int, limit int) (result []*model.Brand, count int64, err error) {
	result, err = b.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = b.Offset(-1).Limit(-1).Count()
	return
}

func (b brandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = b.Count()
	if err != nil {
		return
	}

	err = b.Offset(offset).Limit(limit).Scan(result)
	return
}

func (b brandDo) Scan(result interface{}) (err error) {
	return b.DO.Scan(result)
}

func (b brandDo) Delete(models ...*model.Brand) (result gen.ResultInfo, err error) {
	return b.DO.Delete(models)
}

func (b *brandDo) withDO(do gen.Dao) *brandDo {
	b.DO = *do.(*gen.DO)
	return b
}
