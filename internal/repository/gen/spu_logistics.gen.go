// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSpuLogistics(db *gorm.DB, opts ...gen.DOOption) spuLogistics {
	_spuLogistics := spuLogistics{}

	_spuLogistics.spuLogisticsDo.UseDB(db, opts...)
	_spuLogistics.spuLogisticsDo.UseModel(&model.SpuLogistics{})

	tableName := _spuLogistics.spuLogisticsDo.TableName()
	_spuLogistics.ALL = field.NewAsterisk(tableName)
	_spuLogistics.ID = field.NewInt64(tableName, "id")
	_spuLogistics.SpuID = field.NewInt64(tableName, "spu_id")
	_spuLogistics.Type = field.NewInt64(tableName, "type")
	_spuLogistics.Province = field.NewString(tableName, "province")
	_spuLogistics.City = field.NewString(tableName, "city")
	_spuLogistics.Region = field.NewString(tableName, "region")
	_spuLogistics.PayType = field.NewInt64(tableName, "pay_type")
	_spuLogistics.Price = field.NewField(tableName, "price")
	_spuLogistics.TempID = field.NewInt64(tableName, "temp_id")
	_spuLogistics.ExpressWay = field.NewInt64(tableName, "express_way")
	_spuLogistics.ServerAddressID = field.NewInt64(tableName, "server_address_id")
	_spuLogistics.AddService = field.NewInt64(tableName, "add_service")
	_spuLogistics.CreatedAt = field.NewInt64(tableName, "created_at")
	_spuLogistics.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_spuLogistics.DeletedAt = field.NewField(tableName, "deleted_at")
	_spuLogistics.CreatedBy = field.NewInt64(tableName, "created_by")
	_spuLogistics.UpdatedBy = field.NewInt64(tableName, "updated_by")

	_spuLogistics.fillFieldMap()

	return _spuLogistics
}

// spuLogistics 商品物流表
type spuLogistics struct {
	spuLogisticsDo spuLogisticsDo

	ALL             field.Asterisk
	ID              field.Int64  // 主键
	SpuID           field.Int64  // 商品id
	Type            field.Int64  // 类型(1:寄出,2:寄回)
	Province        field.String // 省
	City            field.String // 市
	Region          field.String // 区/县
	PayType         field.Int64  // 支付类型(1-包邮,2-到付,3-运费模版)
	Price           field.Field  // 价格
	TempID          field.Int64  // 运费模版id
	ExpressWay      field.Int64  // 快递方式
	ServerAddressID field.Int64  // 商家地址id
	AddService      field.Int64  // 增值服务(位运算)
	CreatedAt       field.Int64  // 创建时间
	UpdatedAt       field.Int64  // 修改时间
	DeletedAt       field.Field  // 是否删除
	CreatedBy       field.Int64  // 创建时间
	UpdatedBy       field.Int64  // 修改时间

	fieldMap map[string]field.Expr
}

func (s spuLogistics) Table(newTableName string) *spuLogistics {
	s.spuLogisticsDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spuLogistics) As(alias string) *spuLogistics {
	s.spuLogisticsDo.DO = *(s.spuLogisticsDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spuLogistics) updateTableName(table string) *spuLogistics {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SpuID = field.NewInt64(table, "spu_id")
	s.Type = field.NewInt64(table, "type")
	s.Province = field.NewString(table, "province")
	s.City = field.NewString(table, "city")
	s.Region = field.NewString(table, "region")
	s.PayType = field.NewInt64(table, "pay_type")
	s.Price = field.NewField(table, "price")
	s.TempID = field.NewInt64(table, "temp_id")
	s.ExpressWay = field.NewInt64(table, "express_way")
	s.ServerAddressID = field.NewInt64(table, "server_address_id")
	s.AddService = field.NewInt64(table, "add_service")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.CreatedBy = field.NewInt64(table, "created_by")
	s.UpdatedBy = field.NewInt64(table, "updated_by")

	s.fillFieldMap()

	return s
}

func (s *spuLogistics) WithContext(ctx context.Context) ISpuLogisticsDo {
	return s.spuLogisticsDo.WithContext(ctx)
}

func (s spuLogistics) TableName() string { return s.spuLogisticsDo.TableName() }

func (s spuLogistics) Alias() string { return s.spuLogisticsDo.Alias() }

func (s spuLogistics) Columns(cols ...field.Expr) gen.Columns {
	return s.spuLogisticsDo.Columns(cols...)
}

func (s *spuLogistics) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spuLogistics) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 17)
	s.fieldMap["id"] = s.ID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["type"] = s.Type
	s.fieldMap["province"] = s.Province
	s.fieldMap["city"] = s.City
	s.fieldMap["region"] = s.Region
	s.fieldMap["pay_type"] = s.PayType
	s.fieldMap["price"] = s.Price
	s.fieldMap["temp_id"] = s.TempID
	s.fieldMap["express_way"] = s.ExpressWay
	s.fieldMap["server_address_id"] = s.ServerAddressID
	s.fieldMap["add_service"] = s.AddService
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
}

func (s spuLogistics) clone(db *gorm.DB) spuLogistics {
	s.spuLogisticsDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spuLogistics) replaceDB(db *gorm.DB) spuLogistics {
	s.spuLogisticsDo.ReplaceDB(db)
	return s
}

type spuLogisticsDo struct{ gen.DO }

type ISpuLogisticsDo interface {
	gen.SubQuery
	Debug() ISpuLogisticsDo
	WithContext(ctx context.Context) ISpuLogisticsDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpuLogisticsDo
	WriteDB() ISpuLogisticsDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpuLogisticsDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpuLogisticsDo
	Not(conds ...gen.Condition) ISpuLogisticsDo
	Or(conds ...gen.Condition) ISpuLogisticsDo
	Select(conds ...field.Expr) ISpuLogisticsDo
	Where(conds ...gen.Condition) ISpuLogisticsDo
	Order(conds ...field.Expr) ISpuLogisticsDo
	Distinct(cols ...field.Expr) ISpuLogisticsDo
	Omit(cols ...field.Expr) ISpuLogisticsDo
	Join(table schema.Tabler, on ...field.Expr) ISpuLogisticsDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpuLogisticsDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpuLogisticsDo
	Group(cols ...field.Expr) ISpuLogisticsDo
	Having(conds ...gen.Condition) ISpuLogisticsDo
	Limit(limit int) ISpuLogisticsDo
	Offset(offset int) ISpuLogisticsDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuLogisticsDo
	Unscoped() ISpuLogisticsDo
	Create(values ...*model.SpuLogistics) error
	CreateInBatches(values []*model.SpuLogistics, batchSize int) error
	Save(values ...*model.SpuLogistics) error
	First() (*model.SpuLogistics, error)
	Take() (*model.SpuLogistics, error)
	Last() (*model.SpuLogistics, error)
	Find() ([]*model.SpuLogistics, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuLogistics, err error)
	FindInBatches(result *[]*model.SpuLogistics, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SpuLogistics) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpuLogisticsDo
	Assign(attrs ...field.AssignExpr) ISpuLogisticsDo
	Joins(fields ...field.RelationField) ISpuLogisticsDo
	Preload(fields ...field.RelationField) ISpuLogisticsDo
	FirstOrInit() (*model.SpuLogistics, error)
	FirstOrCreate() (*model.SpuLogistics, error)
	FindByPage(offset int, limit int) (result []*model.SpuLogistics, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpuLogisticsDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spuLogisticsDo) Debug() ISpuLogisticsDo {
	return s.withDO(s.DO.Debug())
}

func (s spuLogisticsDo) WithContext(ctx context.Context) ISpuLogisticsDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spuLogisticsDo) ReadDB() ISpuLogisticsDo {
	return s.Clauses(dbresolver.Read)
}

func (s spuLogisticsDo) WriteDB() ISpuLogisticsDo {
	return s.Clauses(dbresolver.Write)
}

func (s spuLogisticsDo) Session(config *gorm.Session) ISpuLogisticsDo {
	return s.withDO(s.DO.Session(config))
}

func (s spuLogisticsDo) Clauses(conds ...clause.Expression) ISpuLogisticsDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spuLogisticsDo) Returning(value interface{}, columns ...string) ISpuLogisticsDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spuLogisticsDo) Not(conds ...gen.Condition) ISpuLogisticsDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spuLogisticsDo) Or(conds ...gen.Condition) ISpuLogisticsDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spuLogisticsDo) Select(conds ...field.Expr) ISpuLogisticsDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spuLogisticsDo) Where(conds ...gen.Condition) ISpuLogisticsDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spuLogisticsDo) Order(conds ...field.Expr) ISpuLogisticsDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spuLogisticsDo) Distinct(cols ...field.Expr) ISpuLogisticsDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spuLogisticsDo) Omit(cols ...field.Expr) ISpuLogisticsDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spuLogisticsDo) Join(table schema.Tabler, on ...field.Expr) ISpuLogisticsDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spuLogisticsDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpuLogisticsDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spuLogisticsDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpuLogisticsDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spuLogisticsDo) Group(cols ...field.Expr) ISpuLogisticsDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spuLogisticsDo) Having(conds ...gen.Condition) ISpuLogisticsDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spuLogisticsDo) Limit(limit int) ISpuLogisticsDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spuLogisticsDo) Offset(offset int) ISpuLogisticsDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spuLogisticsDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuLogisticsDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spuLogisticsDo) Unscoped() ISpuLogisticsDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spuLogisticsDo) Create(values ...*model.SpuLogistics) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spuLogisticsDo) CreateInBatches(values []*model.SpuLogistics, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spuLogisticsDo) Save(values ...*model.SpuLogistics) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spuLogisticsDo) First() (*model.SpuLogistics, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLogistics), nil
	}
}

func (s spuLogisticsDo) Take() (*model.SpuLogistics, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLogistics), nil
	}
}

func (s spuLogisticsDo) Last() (*model.SpuLogistics, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLogistics), nil
	}
}

func (s spuLogisticsDo) Find() ([]*model.SpuLogistics, error) {
	result, err := s.DO.Find()
	return result.([]*model.SpuLogistics), err
}

func (s spuLogisticsDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuLogistics, err error) {
	buf := make([]*model.SpuLogistics, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spuLogisticsDo) FindInBatches(result *[]*model.SpuLogistics, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spuLogisticsDo) Attrs(attrs ...field.AssignExpr) ISpuLogisticsDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spuLogisticsDo) Assign(attrs ...field.AssignExpr) ISpuLogisticsDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spuLogisticsDo) Joins(fields ...field.RelationField) ISpuLogisticsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spuLogisticsDo) Preload(fields ...field.RelationField) ISpuLogisticsDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spuLogisticsDo) FirstOrInit() (*model.SpuLogistics, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLogistics), nil
	}
}

func (s spuLogisticsDo) FirstOrCreate() (*model.SpuLogistics, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuLogistics), nil
	}
}

func (s spuLogisticsDo) FindByPage(offset int, limit int) (result []*model.SpuLogistics, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spuLogisticsDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spuLogisticsDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spuLogisticsDo) Delete(models ...*model.SpuLogistics) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spuLogisticsDo) withDO(do gen.Dao) *spuLogisticsDo {
	s.DO = *do.(*gen.DO)
	return s
}
