// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package gen

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"crmeb_go/internal/model"
)

func newSpuPicture(db *gorm.DB, opts ...gen.DOOption) spuPicture {
	_spuPicture := spuPicture{}

	_spuPicture.spuPictureDo.UseDB(db, opts...)
	_spuPicture.spuPictureDo.UseModel(&model.SpuPicture{})

	tableName := _spuPicture.spuPictureDo.TableName()
	_spuPicture.ALL = field.NewAsterisk(tableName)
	_spuPicture.ID = field.NewInt64(tableName, "id")
	_spuPicture.SpuID = field.NewInt64(tableName, "spu_id")
	_spuPicture.Type = field.NewInt64(tableName, "type")
	_spuPicture.Picture = field.NewString(tableName, "picture")
	_spuPicture.Sort = field.NewInt64(tableName, "sort")
	_spuPicture.CreatedAt = field.NewInt64(tableName, "created_at")
	_spuPicture.UpdatedAt = field.NewInt64(tableName, "updated_at")
	_spuPicture.DeletedAt = field.NewField(tableName, "deleted_at")
	_spuPicture.CreatedBy = field.NewInt64(tableName, "created_by")
	_spuPicture.UpdatedBy = field.NewInt64(tableName, "updated_by")

	_spuPicture.fillFieldMap()

	return _spuPicture
}

// spuPicture 商品图片表
type spuPicture struct {
	spuPictureDo spuPictureDo

	ALL       field.Asterisk
	ID        field.Int64  // 主键
	SpuID     field.Int64  // 商品id
	Type      field.Int64  // 图片类型(1:封面,2:视频)
	Picture   field.String // 图片/视频
	Sort      field.Int64  // 排序
	CreatedAt field.Int64  // 创建时间
	UpdatedAt field.Int64  // 修改时间
	DeletedAt field.Field  // 是否删除
	CreatedBy field.Int64  // 创建时间
	UpdatedBy field.Int64  // 修改时间

	fieldMap map[string]field.Expr
}

func (s spuPicture) Table(newTableName string) *spuPicture {
	s.spuPictureDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s spuPicture) As(alias string) *spuPicture {
	s.spuPictureDo.DO = *(s.spuPictureDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *spuPicture) updateTableName(table string) *spuPicture {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.SpuID = field.NewInt64(table, "spu_id")
	s.Type = field.NewInt64(table, "type")
	s.Picture = field.NewString(table, "picture")
	s.Sort = field.NewInt64(table, "sort")
	s.CreatedAt = field.NewInt64(table, "created_at")
	s.UpdatedAt = field.NewInt64(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")
	s.CreatedBy = field.NewInt64(table, "created_by")
	s.UpdatedBy = field.NewInt64(table, "updated_by")

	s.fillFieldMap()

	return s
}

func (s *spuPicture) WithContext(ctx context.Context) ISpuPictureDo {
	return s.spuPictureDo.WithContext(ctx)
}

func (s spuPicture) TableName() string { return s.spuPictureDo.TableName() }

func (s spuPicture) Alias() string { return s.spuPictureDo.Alias() }

func (s spuPicture) Columns(cols ...field.Expr) gen.Columns { return s.spuPictureDo.Columns(cols...) }

func (s *spuPicture) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *spuPicture) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 10)
	s.fieldMap["id"] = s.ID
	s.fieldMap["spu_id"] = s.SpuID
	s.fieldMap["type"] = s.Type
	s.fieldMap["picture"] = s.Picture
	s.fieldMap["sort"] = s.Sort
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
	s.fieldMap["created_by"] = s.CreatedBy
	s.fieldMap["updated_by"] = s.UpdatedBy
}

func (s spuPicture) clone(db *gorm.DB) spuPicture {
	s.spuPictureDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s spuPicture) replaceDB(db *gorm.DB) spuPicture {
	s.spuPictureDo.ReplaceDB(db)
	return s
}

type spuPictureDo struct{ gen.DO }

type ISpuPictureDo interface {
	gen.SubQuery
	Debug() ISpuPictureDo
	WithContext(ctx context.Context) ISpuPictureDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISpuPictureDo
	WriteDB() ISpuPictureDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISpuPictureDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISpuPictureDo
	Not(conds ...gen.Condition) ISpuPictureDo
	Or(conds ...gen.Condition) ISpuPictureDo
	Select(conds ...field.Expr) ISpuPictureDo
	Where(conds ...gen.Condition) ISpuPictureDo
	Order(conds ...field.Expr) ISpuPictureDo
	Distinct(cols ...field.Expr) ISpuPictureDo
	Omit(cols ...field.Expr) ISpuPictureDo
	Join(table schema.Tabler, on ...field.Expr) ISpuPictureDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISpuPictureDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISpuPictureDo
	Group(cols ...field.Expr) ISpuPictureDo
	Having(conds ...gen.Condition) ISpuPictureDo
	Limit(limit int) ISpuPictureDo
	Offset(offset int) ISpuPictureDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuPictureDo
	Unscoped() ISpuPictureDo
	Create(values ...*model.SpuPicture) error
	CreateInBatches(values []*model.SpuPicture, batchSize int) error
	Save(values ...*model.SpuPicture) error
	First() (*model.SpuPicture, error)
	Take() (*model.SpuPicture, error)
	Last() (*model.SpuPicture, error)
	Find() ([]*model.SpuPicture, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuPicture, err error)
	FindInBatches(result *[]*model.SpuPicture, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SpuPicture) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISpuPictureDo
	Assign(attrs ...field.AssignExpr) ISpuPictureDo
	Joins(fields ...field.RelationField) ISpuPictureDo
	Preload(fields ...field.RelationField) ISpuPictureDo
	FirstOrInit() (*model.SpuPicture, error)
	FirstOrCreate() (*model.SpuPicture, error)
	FindByPage(offset int, limit int) (result []*model.SpuPicture, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISpuPictureDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s spuPictureDo) Debug() ISpuPictureDo {
	return s.withDO(s.DO.Debug())
}

func (s spuPictureDo) WithContext(ctx context.Context) ISpuPictureDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s spuPictureDo) ReadDB() ISpuPictureDo {
	return s.Clauses(dbresolver.Read)
}

func (s spuPictureDo) WriteDB() ISpuPictureDo {
	return s.Clauses(dbresolver.Write)
}

func (s spuPictureDo) Session(config *gorm.Session) ISpuPictureDo {
	return s.withDO(s.DO.Session(config))
}

func (s spuPictureDo) Clauses(conds ...clause.Expression) ISpuPictureDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s spuPictureDo) Returning(value interface{}, columns ...string) ISpuPictureDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s spuPictureDo) Not(conds ...gen.Condition) ISpuPictureDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s spuPictureDo) Or(conds ...gen.Condition) ISpuPictureDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s spuPictureDo) Select(conds ...field.Expr) ISpuPictureDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s spuPictureDo) Where(conds ...gen.Condition) ISpuPictureDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s spuPictureDo) Order(conds ...field.Expr) ISpuPictureDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s spuPictureDo) Distinct(cols ...field.Expr) ISpuPictureDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s spuPictureDo) Omit(cols ...field.Expr) ISpuPictureDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s spuPictureDo) Join(table schema.Tabler, on ...field.Expr) ISpuPictureDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s spuPictureDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISpuPictureDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s spuPictureDo) RightJoin(table schema.Tabler, on ...field.Expr) ISpuPictureDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s spuPictureDo) Group(cols ...field.Expr) ISpuPictureDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s spuPictureDo) Having(conds ...gen.Condition) ISpuPictureDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s spuPictureDo) Limit(limit int) ISpuPictureDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s spuPictureDo) Offset(offset int) ISpuPictureDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s spuPictureDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISpuPictureDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s spuPictureDo) Unscoped() ISpuPictureDo {
	return s.withDO(s.DO.Unscoped())
}

func (s spuPictureDo) Create(values ...*model.SpuPicture) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s spuPictureDo) CreateInBatches(values []*model.SpuPicture, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s spuPictureDo) Save(values ...*model.SpuPicture) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s spuPictureDo) First() (*model.SpuPicture, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuPicture), nil
	}
}

func (s spuPictureDo) Take() (*model.SpuPicture, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuPicture), nil
	}
}

func (s spuPictureDo) Last() (*model.SpuPicture, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuPicture), nil
	}
}

func (s spuPictureDo) Find() ([]*model.SpuPicture, error) {
	result, err := s.DO.Find()
	return result.([]*model.SpuPicture), err
}

func (s spuPictureDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SpuPicture, err error) {
	buf := make([]*model.SpuPicture, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s spuPictureDo) FindInBatches(result *[]*model.SpuPicture, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s spuPictureDo) Attrs(attrs ...field.AssignExpr) ISpuPictureDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s spuPictureDo) Assign(attrs ...field.AssignExpr) ISpuPictureDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s spuPictureDo) Joins(fields ...field.RelationField) ISpuPictureDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s spuPictureDo) Preload(fields ...field.RelationField) ISpuPictureDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s spuPictureDo) FirstOrInit() (*model.SpuPicture, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuPicture), nil
	}
}

func (s spuPictureDo) FirstOrCreate() (*model.SpuPicture, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SpuPicture), nil
	}
}

func (s spuPictureDo) FindByPage(offset int, limit int) (result []*model.SpuPicture, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s spuPictureDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s spuPictureDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s spuPictureDo) Delete(models ...*model.SpuPicture) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *spuPictureDo) withDO(do gen.Dao) *spuPictureDo {
	s.DO = *do.(*gen.DO)
	return s
}
